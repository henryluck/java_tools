package jlx.db.proxy;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.Statement;

public class StatementProxy implements Statement {
	private Statement statement = null;

	public StatementProxy(Statement statement) {
		this.statement = statement;
	}

	public void addBatch(String sql) throws SQLException {
		long start = System.currentTimeMillis();
		statement.addBatch(sql);
		long end = System.currentTimeMillis();
		debug("addBatch: cost="+(end-start)+"ms;sql=" + sql);
	}

	public void cancel() throws SQLException {
		statement.cancel();

	}

	public void clearBatch() throws SQLException {
		// TODO Auto-generated method stub
		statement.clearBatch();
	}

	public void clearWarnings() throws SQLException {
		// TODO Auto-generated method stub
		statement.clearWarnings();
	}

	public void close() throws SQLException {
		// TODO Auto-generated method stub
		statement.close();
	}

	public boolean execute(String sql) throws SQLException {
		// TODO Auto-generated method stub
		long start = System.currentTimeMillis();
		boolean result = statement.execute(sql);
		long end = System.currentTimeMillis();
		debug("execute(sql): cost="+(end-start)+"ms;sql=" + sql);
		return result;
	}

	public boolean execute(String sql, int autoGeneratedKeys)
			throws SQLException {
		// TODO Auto-generated method stub
		long start = System.currentTimeMillis();
		boolean result = statement.execute(sql, autoGeneratedKeys);
		long end = System.currentTimeMillis();
		debug("execute(sql,autoGK): cost="+(end-start)+"ms;sql=" + sql);
		return result;
	}

	public boolean execute(String sql, int[] columnIndexes) throws SQLException {
		// TODO Auto-generated method stub
		long start = System.currentTimeMillis();
		boolean result = statement.execute(sql, columnIndexes);
		long end = System.currentTimeMillis();
		debug("execute(sql,[]columnI): cost="+(end-start)+"ms;sql=" + sql);
		return result;
	}

	public boolean execute(String sql, String[] columnNames)
			throws SQLException {
		long start = System.currentTimeMillis();
		boolean result =  statement.execute(sql, columnNames);
		long end = System.currentTimeMillis();
		debug("execute(sql,[]columnN): cost="+(end-start)+"ms;sql=" + sql);
		return result;
	}

	public int[] executeBatch() throws SQLException {
		// TODO Auto-generated method stub
		long start = System.currentTimeMillis();
		int[] result =  statement.executeBatch();
		long end = System.currentTimeMillis();
		debug("executeBatch: cost="+(end-start)+"ms");
		return result;
	}

	public ResultSet executeQuery(String sql) throws SQLException {
		// TODO Auto-generated method stub
		long start = System.currentTimeMillis();
		ResultSet result =  statement.executeQuery(sql);
		long end = System.currentTimeMillis();
		debug("executeQuery: cost="+(end-start)+"ms;sql=" + sql);
		return result;
	}

	public int executeUpdate(String sql) throws SQLException {
		// TODO Auto-generated method stub
		long start = System.currentTimeMillis();
		int result =  statement.executeUpdate(sql);
		long end = System.currentTimeMillis();
		debug("executeUpdate: cost="+(end-start)+"ms;sql=" + sql);
		return result;
	}

	public int executeUpdate(String sql, int autoGeneratedKeys)
			throws SQLException {
		// TODO Auto-generated method stub
		long start = System.currentTimeMillis();
		int result =  statement.executeUpdate(sql, autoGeneratedKeys);
		long end = System.currentTimeMillis();
		debug("executeUpdate(sql,autoGK): cost="+(end-start)+"ms;sql=" + sql);
		return result;
	}

	public int executeUpdate(String sql, int[] columnIndexes)
			throws SQLException {
		// TODO Auto-generated method stub
		long start = System.currentTimeMillis();
		int result =  statement.executeUpdate(sql, columnIndexes);
		long end = System.currentTimeMillis();
		debug("executeUpdate(sql,[]columnI): cost="+(end-start)+"ms;sql=" + sql);
		return result;
	}

	public int executeUpdate(String sql, String[] columnNames)
			throws SQLException {
		// TODO Auto-generated method stub
		long start = System.currentTimeMillis();
		int result =  statement.executeUpdate(sql, columnNames);
		long end = System.currentTimeMillis();
		debug("executeUpdate(sql,[]columnN): cost="+(end-start)+"ms;sql=" + sql);
		return result;
	}

	public Connection getConnection() throws SQLException {
		// TODO Auto-generated method stub
		return new ConnetionProxy(statement.getConnection());
	}

	public int getFetchDirection() throws SQLException {
		// TODO Auto-generated method stub
		return statement.getFetchDirection();
	}

	public int getFetchSize() throws SQLException {
		// TODO Auto-generated method stub
		return statement.getFetchSize();
	}

	public ResultSet getGeneratedKeys() throws SQLException {
		// TODO Auto-generated method stub
		return statement.getGeneratedKeys();
	}

	public int getMaxFieldSize() throws SQLException {
		// TODO Auto-generated method stub
		return statement.getMaxFieldSize();
	}

	public int getMaxRows() throws SQLException {
		// TODO Auto-generated method stub
		return statement.getMaxRows();
	}

	public boolean getMoreResults() throws SQLException {
		// TODO Auto-generated method stub
		return statement.getMoreResults();
	}

	public boolean getMoreResults(int current) throws SQLException {
		// TODO Auto-generated method stub
		return statement.getMoreResults(current);
	}

	public int getQueryTimeout() throws SQLException {
		// TODO Auto-generated method stub
		return statement.getQueryTimeout();
	}

	public ResultSet getResultSet() throws SQLException {
		// TODO Auto-generated method stub
		return statement.getResultSet();
	}

	public int getResultSetConcurrency() throws SQLException {
		// TODO Auto-generated method stub
		return statement.getResultSetConcurrency();
	}

	public int getResultSetHoldability() throws SQLException {
		// TODO Auto-generated method stub
		return statement.getResultSetHoldability();
	}

	public int getResultSetType() throws SQLException {
		// TODO Auto-generated method stub
		return statement.getResultSetType();
	}

	public int getUpdateCount() throws SQLException {
		// TODO Auto-generated method stub
		return statement.getUpdateCount();
	}

	public SQLWarning getWarnings() throws SQLException {
		// TODO Auto-generated method stub
		return statement.getWarnings();
	}

	public void setCursorName(String name) throws SQLException {
		// TODO Auto-generated method stub
		statement.setCursorName(name);
	}

	public void setEscapeProcessing(boolean enable) throws SQLException {
		// TODO Auto-generated method stub
		statement.setEscapeProcessing(enable);
	}

	public void setFetchDirection(int direction) throws SQLException {
		// TODO Auto-generated method stub
		statement.setFetchDirection(direction);
	}

	public void setFetchSize(int rows) throws SQLException {
		// TODO Auto-generated method stub
		statement.setFetchSize(rows);
	}

	public void setMaxFieldSize(int max) throws SQLException {
		// TODO Auto-generated method stub
		statement.setMaxFieldSize(max);
	}

	public void setMaxRows(int max) throws SQLException {
		// TODO Auto-generated method stub
		statement.setMaxRows(max);
	}

	public void setQueryTimeout(int seconds) throws SQLException {
		// TODO Auto-generated method stub
		statement.setQueryTimeout(seconds);
	}

	public void debug(String sql) {
		Logger.log(sql);
	}
}
